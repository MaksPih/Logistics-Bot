from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from bot.states.contact_states import ContactForm

router = Router()

# –Ü–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É FSM
contact_inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data="contact_request")]
    ]
)

@router.message(lambda msg: msg.text == "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –ó–≤‚Äô—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def contact_info(message: Message):
    text = (
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:*\n\n"
        "üìç –Æ—Ä–∏–¥–∏—á–Ω–∞ –∞–¥—Ä–µ—Å–∞: –º. –õ—å–≤—ñ–≤, –≤—É–ª. –ü—Ä–æ–º–∏—Å–ª–æ–≤–∞, 50/52\n"
        "üì± –¶–µ–Ω—Ç—Ä –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ 24/7: +38 (098) 465-84-97\n"
        "‚úâÔ∏è Email: info@transline-logistics.com\n\n"
        "üïò *–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏:*\n"
        "–ü–Ω‚Äì–ü—Ç: 08:00‚Äì18:00\n"
        "–°–±: 09:00‚Äì15:00\n"
        "–ù–¥: –≤–∏—Ö—ñ–¥–Ω–∏–π\n\n"
        "üîΩ –ó–∞–ª–∏—à—Ç–µ –∑–∞—è–≤–∫—É, —ñ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏:"
    )
    await message.answer(text, reply_markup=contact_inline_kb, parse_mode="Markdown")

# –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ ‚Äî –ø–æ—á–∞—Ç–æ–∫ FSM
@router.callback_query(F.data == "contact_request")
async def start_contact_form(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üë§ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")
    await state.set_state(ContactForm.waiting_for_name)
    await callback.answer()

# –Ü–º‚Äô—è
@router.message(ContactForm.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await state.set_state(ContactForm.waiting_for_phone)

# –¢–µ–ª–µ—Ñ–æ–Ω
@router.message(ContactForm.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è:")
    await state.set_state(ContactForm.waiting_for_comment)

# –ö–æ–º–µ–Ω—Ç–∞—Ä
@router.message(ContactForm.waiting_for_comment)
async def get_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()
    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!\n\n"
        f"üë§ –Ü–º‚Äô—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"‚úâÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä: {data['comment']}\n\n"
        f"–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
    )
    await state.clear()