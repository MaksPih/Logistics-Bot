from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from bot.states.delivery_states import DeliveryForm
from bot.services.maps import get_route_data, build_static_map, calculate_cost
from bot.services.fuel import get_current_fuel_price
from bot.services.database import save_order
from bot.services.database import get_orders_by_user


router = Router()

# –¢–∏–ø–∏ –∞–≤—Ç–æ
vehicle_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–¢–µ–Ω—Ç", callback_data="vehicle_—Ç–µ–Ω—Ç")],
        [InlineKeyboardButton(text="–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä", callback_data="vehicle_—Ä–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä")],
        [InlineKeyboardButton(text="–ó–µ—Ä–Ω–æ–≤–æ–∑/—Å–∞–º–æ—Å–∫–∏–¥", callback_data="vehicle_–∑–µ—Ä–Ω–æ–≤–æ–∑/—Å–∞–º–æ—Å–∫–∏–¥")],
        [InlineKeyboardButton(text="–¢—Ä–∞–ª/–ù–µ–≥–∞–±–∞—Ä–∏—Ç", callback_data="vehicle_—Ç—Ä–∞–ª/–Ω–µ–≥–∞–±–∞—Ä–∏—Ç")],
        [InlineKeyboardButton(text="–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑", callback_data="vehicle_–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑")],
        [InlineKeyboardButton(text="–ê–≤—Ç–æ—Ü–∏—Å—Ç–µ—Ä–Ω–∞", callback_data="vehicle_–∞–≤—Ç–æ—Ü–∏—Å—Ç–µ—Ä–Ω–∞")],
    ]
)

# –¢–æ–Ω–Ω–∞–∂
tonnage_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="5 —Ç", callback_data="tonnage_5")],
        [InlineKeyboardButton(text="10 —Ç", callback_data="tonnage_10")],
        [InlineKeyboardButton(text="15 —Ç", callback_data="tonnage_15")],
        [InlineKeyboardButton(text="20 —Ç", callback_data="tonnage_20")],
        [InlineKeyboardButton(text="24 —Ç", callback_data="tonnage_24")],
    ]
)

# –°—Ç–∞—Ä—Ç FSM
@router.message(lambda msg: msg.text == "üì¶ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏")
async def start(message: Message, state: FSMContext):
    await message.answer("üìç –í–≤–µ–¥—ñ—Ç—å —Ç–æ—á–∫—É –ê (–º—ñ—Å—Ç–æ/–∞–¥—Ä–µ—Å–∞):")
    await state.set_state(DeliveryForm.origin_city)

@router.message(DeliveryForm.origin_city)
async def set_origin(message: Message, state: FSMContext):
    await state.update_data(origin=message.text)
    await message.answer("üèÅ –í–≤–µ–¥—ñ—Ç—å —Ç–æ—á–∫—É –ë (–º—ñ—Å—Ç–æ/–∞–¥—Ä–µ—Å–∞):")
    await state.set_state(DeliveryForm.destination_city)

@router.message(DeliveryForm.destination_city)
async def set_destination(message: Message, state: FSMContext):
    await state.update_data(destination=message.text)
    await message.answer("üöõ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", reply_markup=vehicle_kb)
    await state.set_state(DeliveryForm.cargo_type)

@router.callback_query(F.data.startswith("vehicle_"))
async def choose_vehicle(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    vehicle = callback.data.replace("vehicle_", "")
    await state.update_data(vehicle=vehicle)
    await callback.message.answer("‚öñÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–æ–Ω–Ω–∞–∂ –≤–∞–Ω—Ç–∞–∂—É:", reply_markup=tonnage_kb)
    await state.set_state(DeliveryForm.weight)

@router.callback_query(F.data.startswith("tonnage_"))
async def choose_tonnage(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    tonnage = int(callback.data.replace("tonnage_", ""))
    await state.update_data(tonnage=tonnage)
    data = await state.get_data()

    fuel_price, fuel_date = await get_current_fuel_price()
    if fuel_price is None:
        fuel_price = 52.28
        fuel_date = "06.06.2025"

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç
    route = await get_route_data(data['origin'], data['destination'])
    if not route:
        await callback.message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏.")
        await state.clear()
        return

    distance_km = route['distance_km']
    duration_str = route['duration_str']
    polyline = route['polyline']

    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å
    cost_data = calculate_cost(distance_km, data['vehicle'], fuel_price)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    map_url = build_static_map(data['origin'], data['destination'], polyline)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    await callback.message.answer_photo(photo=map_url)

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    result_text = (
        f"*–ú–∞—Ä—à—Ä—É—Ç*\n"
        f"{data['origin']} - {data['destination']}\n"
        f"{distance_km} –∫–º ¬∑ {duration_str}\n"
        f"–í–∞—Ä—Ç—ñ—Å—Ç—å 1 –∫–º: {cost_data['per_km']} –≥—Ä–Ω\n\n"
        f"*–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏*\n"
        f"{cost_data['fuel_l']} –ª ‚Äì —Ä–æ–∑—Ö—ñ–¥ –ø–∞–ª–∏–≤–∞\n"
        f"{cost_data['fuel_price']} –≥—Ä–Ω/–ª ‚Äì —Ü—ñ–Ω–∞ –ø–∞–ª—å–Ω–æ–≥–æ ({fuel_date})\n"
        f"{cost_data['fuel_cost']} –≥—Ä–Ω ‚Äì –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –ø–∞–ª–∏–≤–æ\n\n"
        f"*–í–∞—Ä—Ç—ñ—Å—Ç—å*\n"
        f"{cost_data['total']} –≥—Ä–Ω ‚Äì –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è"
    )

    # –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    confirm_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="confirm_order")]
        ]
    )

    await callback.message.answer(result_text, parse_mode="Markdown", reply_markup=confirm_kb)
    await state.update_data(cost_data=cost_data, route_data=route)
    await state.set_state(DeliveryForm.confirmation)

@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    full_data = await state.get_data()

    order_data = {
        "origin": full_data["origin"],
        "destination": full_data["destination"],
        "vehicle": full_data["vehicle"],
        "tonnage": full_data["tonnage"],
        "distance_km": full_data["route_data"]["distance_km"],
        "duration_str": full_data["route_data"]["duration_str"],
        "per_km": full_data["cost_data"]["per_km"],
        "fuel_l": full_data["cost_data"]["fuel_l"],
        "fuel_price": full_data["cost_data"]["fuel_price"],
        "fuel_cost": full_data["cost_data"]["fuel_cost"],
        "total": full_data["cost_data"]["total"],
    }

    save_order(user_id, order_data)
    await callback.message.answer("‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ.\n–°—Ç–∞—Ç—É—Å: *–≤ –æ–±—Ä–æ–±—Ü—ñ*", parse_mode="Markdown")
    await state.clear()

@router.message(lambda msg: msg.text == "üöõ –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def track_order(message: Message):
    orders = get_orders_by_user(message.from_user.id)

    if not orders:
        await message.answer("üîç –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return

    latest = orders[0]
    text = (
        f"üì¶ *–í–∞—à–µ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n"
        f"üöö –¢–∏–ø –∞–≤—Ç–æ: {latest[4]}\n"
        f"‚öñÔ∏è –í–∞–≥–∞: {latest[5]} —Ç\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {latest[2]} ‚Üí {latest[3]}\n"
        f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {latest[6]} –∫–º\n"
        f"üïì –ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {latest[7]}\n"
        f"üí∏ –í–∞—Ä—Ç—ñ—Å—Ç—å: {latest[12]} –≥—Ä–Ω\n"
        f"üìå –°—Ç–∞—Ç—É—Å: *{latest[13]}*\n"
        f"üïê –î–∞—Ç–∞: {latest[14]}"
    )
    await message.answer(text, parse_mode="Markdown")